---
openapi: 3.0.1
info:
  title: Workspace Rentals API
  description: |-
    To use the authorized endpoints:
      1. Register a new user
      2. Log in with the user you registered
      3. Copy the token string in the response body
      4. Click "Authorize [padlock-icon]", paste it in the "value" field, then click "Authorize".
  version: v1
servers:
- url: http://localhost:3000
  description: Sandbox server for testing
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  "/api/v1/registrations":
    post:
      summary: Registers a new user
      tags:
      - Users
      responses:
        '201':
          description: user registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                    required:
                    - id
                    - username
        '400':
          description: user not registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
                  errors:
                    type: object
                    properties:
                      username:
                        type: array
                        items:
                          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                registration[username]:
                  type: string
              required:
              - registration[username]
        description: Username needed to create a new user.
  "/api/v1/reservations":
    get:
      summary: Retrieves all reservations for the current user
      security:
        - bearerAuth: []
      tags:
      - Reservations
      responses:
        '200':
          description: successful
    post:
      parameters:
      - name: workspace
        in: query
        description: Workspace ID
        required: true
        schema:
          type: integer
      summary: Creates a new reservation
      security:
        - bearerAuth: []
      tags:
      - Reservations
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservation:
                    type: object
                    properties:
                      id:
                        type: integer
                      start_date:
                        type: string
                        format: date
                      end_date:
                        type: string
                        format: date
                      city:
                        type: string
                      workspace_id:
                        type: integer
                      user_id:
                        type: integer
                    required:
                    - id
                    - start_date
                    - end_date
                    - city
                    - workspace_id
                    - user_id
                  success:
                    type: string
        '400':
          description: reservation not created
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                reservation[start_date]:
                  description: YYYY-MM-DD
                  type: string
                  format: date
                reservation[end_date]:
                  description: YYYY-MM-DD -> has to be same as the start date, or later.
                  type: string
                  format: date
                reservation[city]:
                  type: string
              required:
              - reservation[start_date]
              - reservation[end_date]
              - reservation[city]
            example:
              $ref: '#components/examples/reservation'
  "/api/v1/reservations/{id}":
    parameters:
    - name: id
      in: path
      description: Reservation ID
      required: true
      schema:
        type: integer
    get:
      summary: Retrieves a specific reservation
      security:
        - bearerAuth: []
      tags:
      - Reservations
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservation:
                    type: object
                    properties:
                      id:
                        type: integer
                      start_date:
                        type: string
                        format: date
                      end_date:
                        type: string
                        format: date
                      city:
                        type: string
                      workspace_id:
                        type: integer
                      user_id:
                        type: integer
                    required:
                    - id
                    - start_date
                    - end_date
                    - city
                    - workspace_id
                    - user_id
  "/api/v1/sessions":
    post:
      summary: Logs a user in
      tags:
      - Users
      responses:
        '200':
          description: user logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  username:
                    type: string
                  token:
                    type: string
        '401':
          description: user not registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                session[username]:
                  type: string
              required:
              - session[username]
        description: A username of an existing user needed to sign in.
  "/api/v1/workspaces":
    get:
      summary: Retrieves all workspaces
      tags:
      - Workspaces
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  workspaces:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        description:
                          type: string
                        image_url:
                          type: string
                      required:
                      - id
                      - name
                      - description
    post:
      summary: Creates a new workspace
      security:
        - bearerAuth: []
      tags:
      - Workspaces
      responses:
        '201':
          description: workspace created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
        '400':
          description: workspace not created
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                workspace[name]:
                  type: string
                workspace[description]:
                  type: string
                workspace[image]:
                  type: string
                  format: binary
              required:
              - workspace[name]
              - workspace[description]
              - workspace[image]
  "/api/v1/workspaces/{id}":
    parameters:
    - name: id
      in: path
      description: Workspace ID
      required: true
      schema:
        type: string
    get:
      summary: Retrieves a specific workspace
      tags:
      - Workspaces
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  workspace:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      description:
                        type: string
                      image_url:
                        type: string
                    required:
                    - id
                    - name
                    - description
    delete:
      summary: Deletes a workspace
      security:
        - bearerAuth: []
      tags:
      - Workspaces
      responses:
        '201':
          description: workspace deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
        '404':
          description: workspace not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    